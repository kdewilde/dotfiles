" Don't try to be vi compatible
set nocompatible

set timeoutlen=1000 ttimeoutlen=0


"""""""""""""""""""""""""""""""
" PLUG settings
"""""""""""""""""""""""""""""""
" Check if plug.vim is installed else do so
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif


call plug#begin('~/.vim/plugged')

Plug 'vim-airline/vim-airline'
Plug 'tpope/vim-surround'
Plug 'easymotion/vim-easymotion'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'mboughaba/i3config.vim'
" material theme
Plug 'kaicataldo/material.vim'
" Syntax for different languages
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-commentary'

Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Plug 'neoclide/coc.nvim', {'tag': '*', 'do': './install.sh'}
" Plug 'neoclide/coc-tsserver', {'do': 'yarn install --frozen-lockfile'}

" Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install'  }
" Plug 'dhruvasagar/vim-table-mode'
" Plug 'SirVer/ultisnips'
" Plug 'tpope/vim-commentary'
" Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }

" Initialize plugin system
call plug#end()

nmap s <Plug>(easymotion-s)
"""""""""""""""""""""""""""""""
" Theme - Material
"""""""""""""""""""""""""""""""
" set background=dark
colorscheme material
if (has("termguicolors"))
  set termguicolors
endif
let g:material_theme_style='palenight'
" Italics for my favorite color scheme
let g:material_terminal_italics=1


"""""""""""""""""""""""""""""""
" Clipboard
"""""""""""""""""""""""""""""""
" Note: Avoids compatibility issues when copying to an external application!
if has('unnamedplus')
  set clipboard=unnamedplus
else
  set clipboard=unnamed
endif

" Note: Don't create swap files!
set noswapfile

" Note: Solve read only problem! Some files opens as read only!
set ma

"""""""""""""""""""""""""""""""
" FZF settings
"""""""""""""""""""""""""""""""
" add fzf to the runtimepath
" set rtp+=~/.fzf
" replace fzf find command with ag and use .gitignore
let $FZF_DEFAULT_COMMAND = 'ag -g ""'

nnoremap <silent> <C-p> :GFiles<cr>
nnoremap <silent> <C-e> :Buffers<cr>
nnoremap <silent> <C-l> :Lines<cr>
nnoremap <silent> <C-F> :Ag<cr>
" nnoremap <silent> <C-p> :Files<cr>
" nnoremap <silent> <C-e> :Buffers<cr>
" nnoremap <silent> <C-l> :Lines<cr>
"""""""""""""""""""""""""""""""

aug i3config_ft_detection
  au!
  au BufNewFile,BufRead ~/.i3/config set filetype=i3config
aug end

""""""""""""""""""""""""""""""""
"" CoC settings
""""""""""""""""""""""""""""""""
"" if hidden is not set, TextEdit might fail.
"set hidden

"" Some servers have issues with backup files, see #649
"set nobackup
"set nowritebackup

"" Better display for messages
set cmdheight=2

"" You will have bad experience for diagnostic messages when it's default 4000.
"set updatetime=300

"" don't give |ins-completion-menu| messages.
"set shortmess+=c

"" always show signcolumns
"set signcolumn=yes" Use tab for trigger completion with characters ahead and navigate.
"" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
"inoremap <silent><expr> <TAB>
"      \ pumvisible() ? "\<C-n>" :
"      \ <SID>check_back_space() ? "\<TAB>" :
"      \ coc#refresh()
"inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

"function! s:check_back_space() abort
"  let col = col('.') - 1
"  return !col || getline('.')[col - 1]  =~# '\s'
"endfunction

"" Use <c-space> to trigger completion.
"inoremap <silent><expr> <c-space> coc#refresh()

"" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
"" Coc only does snippet and additional edit on confirm.
"inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
"" Or use `complete_info` if your vim support it, like:
"" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

"" Use `[g` and `]g` to navigate diagnostics
"nmap <silent> [g <Plug>(coc-diagnostic-prev)
"nmap <silent> ]g <Plug>(coc-diagnostic-next)

"" Remap keys for gotos
"nmap <silent> gd <Plug>(coc-definition)
"nmap <silent> gy <Plug>(coc-type-definition)
"nmap <silent> gi <Plug>(coc-implementation)
"nmap <silent> gr <Plug>(coc-references)

"" Use K to show documentation in preview window
"nnoremap <silent> K :call <SID>show_documentation()<CR>

"function! s:show_documentation()
"  if (index(['vim','help'], &filetype) >= 0)
"    execute 'h '.expand('<cword>')
"  else
"    call CocAction('doHover')
"  endif
"endfunction

"" Highlight symbol under cursor on CursorHold
"autocmd CursorHold * silent call CocActionAsync('highlight')

"" Remap for rename current word
"nmap <leader>rn <Plug>(coc-rename)

"" Remap for format selected region
"xmap <leader>f  <Plug>(coc-format-selected)
"nmap <leader>f  <Plug>(coc-format-selected)
"""""""""""""""""""""""""""""""
" enable matchit plugin to match html tags with %
filetype plugin on
runtime macros/matchit.vim

" disable command history (q:)
nnoremap q: <nop>
nnoremap Q <nop>

" enable gb to go back through jumplist history
noremap gb <c-O>
noremap gf <c-I>

" Turn on syntax highlighting
syntax on

" TODO: Pick a leader key
let mapleader = " "

" Tab between buffers
" This overrides tab behaviour and won't allow CTRL-I to go forward in jumplist
" noremap <tab> <c-w>w
" noremap <S-tab> <c-w>W

" Switch between last two buffers
nnoremap <leader><leader> <C-^>


set tags=tags;/

" Security
set modelines=0

" Show line numbers
set number

" Show file stats
set ruler

" Blink cursor on error instead of beeping (grr)
" set visualbell
set belloff=all

" Encoding
set encoding=utf-8

" Whitespace
set wrap
set textwidth=79
set formatoptions=tcqrn1
set noshiftround
set tabstop=4       " The width of a TAB is set to 4.
                    " Still it is a \t. It is just that
                    " Vim will interpret it to be having
                    " a width of 4.
set shiftwidth=4    " Indents with '>' will have a width of 4.
set softtabstop=4   " Sets the number of columns for a TAB.
set expandtab       " Expand TABs to spaces.

set breakindent     " enable indentation
" ident by an additional 2 characters on wrapped lines, when line >= 40 characters, put 'showbreak' at start of line
set breakindentopt=shift:2,min:40,sbr
" append '>>' to indent
set showbreak=â†ª\ 

autocmd Filetype json setlocal tabstop=2 shiftwidth=2 softtabstop=2

" Cursor motion
set scrolloff=3
set backspace=indent,eol,start
set matchpairs+=<:> " use % to jump between pairs
runtime! macros/matchit.vim


" Search options
set ignorecase
set smartcase

set incsearch
set hlsearch
nnoremap <esc><esc> :nohls<cr>

" Folding options
set foldmethod=syntax
set nofoldenable "open files 'normal'
set foldlevel=9999 "when zc turns on folding it applies foldlevel

nnoremap <silent> <leader>zj :call NextClosedFold('j')<cr>
nnoremap <silent> <leader>zk :call NextClosedFold('k')<cr>
function! NextClosedFold(dir)
    let cmd = 'norm!z' . a:dir
    let view = winsaveview()
    let [l0, l, open] = [0, view.lnum, 1]
    while l != l0 && open
        exe cmd
        let [l0, l] = [l, line('.')]
        let open = foldclosed(l) < 0
    endwhile
    if open
        call winrestview(view)
    endif
endfunction

" Persistent undo
silent !mkdir $HOME/.vim/undo > /dev/null 2>&1
set undofile
set undodir=$HOME/.vim/undo

set undolevels=1000
set undoreload=10000

" reformat json
" nmap gr :%!python -m json.tool<CR>
"

function! ToggleSpecFile()
  let l:file = expand('%')
  if empty(matchstr(l:file, '\.spec\.ts'))
    let l:spec_file = substitute(l:file, '\.ts$', '\.spec.ts', '')
    if filereadable(l:spec_file)
      execute 'e' l:spec_file
    else
      echo "No spec file found!"
    endif
  else
    let l:normal_file = substitute(l:file, '\.spec\.ts$', '\.ts', '')
    if filereadable(l:normal_file)
      execute 'e' l:normal_file
    else
      echo "No file found!"
    endif
  endif
endfunction

nnoremap <silent> <leader>sp :call ToggleSpecFile()<CR>

function! TestCurrentFile()
  if filereadable(@%)
    execute 'silent !echo % | xclip && i3-msg "scratchpad show, [instance=_scratchpad_] move position center, [instance=__scratchpad] focus" && xdotool key Ctrl+c && xdotool type "ng test" && xdotool key Return'
  else
    echo "File doesn't exist!"
  endif
endfunction

nnoremap <silent> <leader>tf :call TestCurrentFile()<CR>

" use with :e %% to expand the pad of the active buffer
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'
